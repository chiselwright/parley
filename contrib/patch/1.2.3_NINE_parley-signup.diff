commit c18b8fef487513e27a7fe936c46c59b10c02d957
Author: Stefan Seifert <nine@detonation.org>
Date:   Fri May 6 14:16:00 2011 +0200

    Fix signup of new users
    
    Recent Data::FormValidator needs a name for a constraint. Otherwise a code ref is returned from validation->invalid in list context for unnamed constraint methods leading to an error.
    Also _add_new_user did not get any form data since Data::FormValidator was used directly by form_check instead of $c->form

diff --git a/lib/Parley/App/DFV.pm b/lib/Parley/App/DFV.pm
index b866550..a883093 100644
--- a/lib/Parley/App/DFV.pm
+++ b/lib/Parley/App/DFV.pm
@@ -18,6 +18,9 @@ sub dfv_constraint_confirm_equal :Export( :constraints ) {
 
     return sub {
         my $dfv = shift;
+
+        $dfv->name_this($attrs->{name} || 'confirm');
+
         my $data = $dfv->get_filtered_data();
 
         return ( $data->{$first} eq $data->{$second} );
@@ -29,6 +32,9 @@ sub dfv_constraint_valid_email :Export( :constraints ) {
 
     return sub {
         my $dfv = shift;
+
+        $dfv->name_this('email');
+
         my $data = $dfv->get_filtered_data();
 
         return Email::Valid->address($data->{email});
diff --git a/lib/Parley/Controller/User/SignUp.pm b/lib/Parley/Controller/User/SignUp.pm
index 021769b..f91a466 100644
--- a/lib/Parley/Controller/User/SignUp.pm
+++ b/lib/Parley/Controller/User/SignUp.pm
@@ -36,6 +36,7 @@ my %dfv_profile_for = (
             confirm_password =>
                 dfv_constraint_confirm_equal(
                     {
+                        name   => 'confirm_password',
                         fields => [qw/new_password confirm_password/],
                     }
                 ),
@@ -50,6 +51,7 @@ my %dfv_profile_for = (
             confirm_email =>
                 dfv_constraint_confirm_equal(
                     {
+                        name   => 'confirm_email',
                         fields => [qw/email confirm_email/],
                     }
                 ),
@@ -170,11 +172,11 @@ sub signup : Path('/user/signup') {
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 sub _add_new_user {
-    my ($self, $c) = @_;
-    my ($valid_results, @messages, $new_user);
+    my ($self, $c, $valid_results) = @_;
+    my (@messages, $new_user);
 
     # less typing
-    $valid_results = $c->form->valid;
+    $valid_results ||= $c->form->valid;
 
     # is the requested username already in use?
     if ($self->_username_exists($c, $valid_results->{new_username})) {
@@ -316,7 +318,7 @@ sub _user_signup {
     $c->forward('check_unique_forumname', ['forum_name']);
 
     if ($c->stash->{validation}->success) {
-        @messages = $self->_add_new_user($c, $results);
+        @messages = $self->_add_new_user($c, scalar $c->stash->{validation}->valid);
     }
 
 #
diff --git a/root/base/dfv/display_validation_messages b/root/base/dfv/display_validation_messages
index e793a09..df5e288 100644
--- a/root/base/dfv/display_validation_messages
+++ b/root/base/dfv/display_validation_messages
@@ -13,7 +13,7 @@
             [% nice_field_name = error_message.name.$field_name || field_name%]
             [% FOR invalid_key IN validation.invalid(field_name) %]
                 [% l(nice_field_name) %]:
-                [% l(error_message.invalid.$invalid_key) || invalid_key %]
+                [% l(error_message.invalid.$invalid_key) || validation.msgs.$invalid_key || invalid_key %]
                 <br />
             [% END %]
         [% END %]
